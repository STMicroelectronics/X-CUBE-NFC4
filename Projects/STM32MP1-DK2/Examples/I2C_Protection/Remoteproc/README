/**
  @page OpenAMP_raw OpenAMP raw example started by Linux Remote Processor Framework

  @verbatim
  ******************** (C) COPYRIGHT 2019 STMicroelectronics *******************
  * @file    Mailbox/Remoteproc/README
  * @author  MCD Application Team
  * @brief   How to run example using Linux Remote Processor Framework
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  @endverbatim

@par Description of M4 Cube example with Linux Remote Processor Framework

When Cube firmware is running on Cortex-M4, System Clock tree and regulators(vrefbuf) are configured by Cortex-A7
Besides, clock source for each peripheral assigned to Cortex-M4 is done by Cortex-A7.


@par How to use it ?

In order to make the program work with Linux running on Cortex-A7, you must do the following :
Before running M4 Cube example, you have to
1) interrupt uboot
2) choose the stm32mp157c-ev1-m4-examples-sdcard configuration to make sure that M4 resources are assigned to Linux Resource Manager driver

Then,
 - Start example using the following command: "fw_cortex_m4.sh start" under example directory installed in userfs partition
     * it will load and start firmware using Linux Remote Processor
 - Stop example using the following command: "fw_cortex_m4.sh stop" under example directory installed in userfs partition
     * it will stop firmware using Linux Remote Processor

@par Example Description
How to use I2C_Protection.

This project runs with CPU2 (Cortex-M4) firmware.
I2C_Protection uses the following HW resources
    * I2C5
    * GPIOA PIN11, PIN12
    * GPIOD PIN1, PIN15
    * GPIOE PIN1, PIN10, PIN13

In this example:
    - Remote Core (CM4) initializes I2C5 and PIOs.
    - Remote Core (CM4) initializes the ST25DV-I2C, blinking the LEDs.
    - Remote Core (CM4) initializes 4 areas in the ST25DV-I2C and sets different protection policies.
    - Remote Core (CM4) close the secure session and tries to read & write each area, displaying result.
    - Remote Core (CM4) open a secure session and try again, showing successes.

    Notes:
    - It requires Linux console to run example.
    - CM4 logging is redirected in Shared memory in MCUSRAM and can be displayed in Linux console for verdict
      using following command:
          cat /sys/kernel/debug/remoteproc/remoteproc0/trace0

    Following command should be done in Linux console on CA7 to run the example :

    > ./fw_cortex_m4.sh start
    > ./fw_cortex_m4.sh stop


@note Care must be taken when using HAL_Delay(), this function provides accurate
      delay (in milliseconds) based on variable incremented in HAL time base ISR.
      This implies that if HAL_Delay() is called from a peripheral ISR process, then
      the HAL time base interrupt must have higher priority (numerically lower) than
      the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the HAL time base interrupt priority you have to use HAL_NVIC_SetPriority()
      function.

@note The application needs to ensure that the HAL time base is always set to 1 millisecond
      to have correct HAL operation.


@par Directory contents
    - I2C_Protection/Inc/main.h                             Main program header file
    - I2C_Protection/Src/app_x-cube-nfc4.h                  NFC Example header
    - I2C_Protection/Src/lock_resource.h                    Resource management header
    - I2C_Protection/Inc/nfc04a1_conf.h                     NFC04 configuration header file
    - I2C_Protection/Src/log.h                              Log to Linux header
    - I2C_Protection/Src/openamp.h                          Open amp API header
    - I2C_Protection/Src/openamp_conf.h                     Open amp configuration header
    - I2C_Protection/Inc/rsc_table.h                        Resource_table for OpenAMP header file
    - I2C_Protection/Inc/RTE_Components.h                   RTE component header file
    - I2C_Protection/Inc/stm32mp15xx_disco_conf.h           MPU discovery configuration header file
    - I2C_Protection/Inc/stm32mp1xx_hal_conf.h              HAL Library Configuration file
    - I2C_Protection/Inc/stm32mp1xx_it.h                    Interrupt handlers header file
    - I2C_Protection/Src/main.c                             Main program
    - I2C_Protection/Src/app_x-cube-nfc4.c                  NFC Example
    - I2C_Protection/Src/lock_resource.c                    Resource management
    - I2C_Protection/Src/log.c                              Log to Linux
    - I2C_Protection/Src/rsc_table.c                        Resource_table for OpenAMP
    - I2C_Protection/Src/stm32mp1xx_hal_msp.c               STM32MP1xx HAL MCU support package
    - I2C_Protection/Src/stm32mp1xx_it.c               Interrupt handlers
    - I2C_Protection/Src/system_stm32mp1xx.c           STM32MP1xx system clock configuration file


@par Hardware and Software environment

  - This example runs on STM32MP157CACx devices.

  - This example has been tested with STM32MP157C-DK2 board and can be
    easily tailored to any other supported device and development board.

@par How to use it ?

In order to make the program work, you must do the following:
 - Open your preferred toolchain
 - Rebuild all files and load your image into target memory
 - Run the example


 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
